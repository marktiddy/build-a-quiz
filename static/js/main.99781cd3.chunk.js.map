{"version":3,"sources":["context/Reducer.js","context/Store.js","keys/firebase.js","components/NavigationBar.js","components/Jumbo.js","components/QuizCard.js","components/Question.js","components/QuizContent.js","screens/QuizPickerScreen.js","screens/WelcomeScreen.js","components/QuizForm/QuizDetails.js","components/QuizForm/QuizQuestions.js","components/QuizForm/Success.js","screens/CreateQuizScreen.js","screens/Footer.js","screens/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["Reducer","state","action","type","quizzes","payload","initialState","Context","createContext","Store","children","useReducer","dispatch","Provider","value","require","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","NavigationBar","Navbar","bg","variant","expand","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","Jumbo","Jumbotron","fluid","QuizCard","content","details","description","image","name","match","useRouteMatch","Card","style","width","Header","Body","Text","Button","url","Question","question","answer","answers","sendAnswer","num","score","useState","selected","setSelected","showQuestion","setShowQuestion","localScore","setLocalScore","Form","Container","Row","Col","Label","map","a","Check","label","checked","onChange","size","onClick","answerCheck","QuizContent","useContext","questionNum","setQuestionNum","setScore","progress","setProgress","quizId","useParams","quiz","filter","q","toString","ProgressBar","striped","animated","now","questions","length","toFixed","processAnswer","key","uuidv4","Spinner","animation","QuizPickerScreen","quizList","path","m","md","xs","WelcomeScreen","QuizDetails","setDetails","setName","setDescription","onSubmit","event","preventDefault","Group","controlId","Control","required","placeholder","target","as","rows","QuizQuestions","handleQuestions","questionCount","questionToEdit","idxToEdit","setQuestion","setAnswers","correctAnswer","setCorrectAnswer","useEffect","handleAnswerChange","updatedAnswers","substr","rightAnswer","idx","data-idx","newAns","splice","removeAnswerOption","newAnswers","addAnswer","Success","quizName","class","CreateQuizScreen","quizDetails","setQuizDetails","questionList","setQuestionList","successState","setSuccessState","setQuestionToEdit","editingIdx","setEditingIdx","db","firestore","localQuiz","JSON","parse","localStorage","getItem","localQuestions","newQuestion","existingQuestions","push","setItem","stringify","quizDetailsObject","handleQuizDetails","editQuestion","newList","deleteQuestion","finalDetails","quizObject","collection","doc","set","then","catch","e","console","log","removeItem","submitQuiz","OverlayTrigger","placement","overlay","Tooltip","Footer","MainScreen","onSnapshot","querySnapshot","quizzesToAdd","forEach","data","component","exact","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.99781cd3.chunk.js","sourcesContent":["const Reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_QUIZZES\":\n      return {\n        ...state,\n        quizzes: action.payload,\n      };\n    case \"ADD_QUIZ\":\n      return { ...state, quizzes: [...state.quizzes, action.payload] };\n    default:\n      return state;\n  }\n};\nexport default Reducer;\n","import React, { createContext, useReducer } from \"react\";\nimport Reducer from \"./Reducer\";\n\nconst initialState = {\n  quizzes: [],\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import firebase from 'firebase/app';\nrequire('firebase/firestore');\n\nconst config = {\n  apiKey: 'AIzaSyBmwhK1NnjQt8sY751BmmP9yVkpJBm2fAc',\n  authDomain: 'build-a-quiz-f88c7.firebaseapp.com',\n  databaseURL: 'https://build-a-quiz-f88c7.firebaseio.com',\n  projectId: 'build-a-quiz-f88c7',\n  storageBucket: 'build-a-quiz-f88c7.appspot.com',\n  messagingSenderId: '117527661424',\n  appId: '1:117527661424:web:071235dfd9dba9ded9ddb5',\n  measurementId: 'G-VGF1VVM62Q',\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nconst NavigationBar = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          <Nav.Link href=\"/play\">Pick A Quiz</Nav.Link>\n          <Nav.Link href=\"/create\">Create A Quiz</Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nconst Jumbo = () => {\n  return (\n    <>\n      <Jumbotron fluid className=\"top-area\">\n        <h1 className=\"top-area--title\">Build-a-Quiz</h1>\n        <p>Build your own quiz...invite others to join in</p>\n      </Jumbotron>\n      <div className=\"shape-divider\"></div>\n    </>\n  );\n};\n\nexport default Jumbo;\n","import React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { useRouteMatch } from 'react-router-dom';\n\nconst QuizCard = ({\n  content: {\n    details: { image, description, name, id },\n  },\n}) => {\n  const match = useRouteMatch();\n  return (\n    <>\n      <Card style={{ width: '18rem' }} className=\"quiz-chooser-card\">\n        <Card.Header className=\"quiz-chooser-card--header text-capitalize\">\n          {name}\n        </Card.Header>\n        <Card.Body>\n          <Card.Text>{description}</Card.Text>\n          <Button variant=\"primary\" href={`${match.url}/${id}`}>\n            Play Quiz\n          </Button>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default QuizCard;\n","import React, { useState } from \"react\";\nimport { Form, Button, Container, Row, Col } from \"react-bootstrap\";\n\nconst Question = ({\n  question: { question, answer, answers },\n  sendAnswer,\n  num,\n  score,\n}) => {\n  const [selected, setSelected] = useState(answers[0]);\n  const [showQuestion, setShowQuestion] = useState(true);\n  const [localScore, setLocalScore] = useState(score);\n\n  const answerCheck = (selected) => {\n    if (selected === answer) {\n      //they're correct. update local score\n      setLocalScore(localScore + 1);\n    }\n    //Finally show the answer\n    setShowQuestion(false);\n  };\n\n  return (\n    <>\n      <Form className=\"question-form\">\n        <Container>\n          <Row>\n            <Col>\n              <Form.Label className=\"question-form--title text-capitalize\">\n                Question {num + 1} - {question}\n              </Form.Label>\n              {showQuestion ? (\n                answers.map((a) => {\n                  return (\n                    <Form.Check\n                      type=\"radio\"\n                      id={a}\n                      label={a}\n                      className=\"question-form--check\"\n                      name=\"answerradios\"\n                      value={a}\n                      checked={selected === a}\n                      onChange={() => setSelected(a)}\n                    />\n                  );\n                })\n              ) : (\n                <div className=\"show-answers-container\">\n                  <p>\n                    You answered:{\" \"}\n                    <span className=\"show-answers-span\">{selected}</span>\n                  </p>\n                  <p>\n                    The correct answer is:{\" \"}\n                    <span className=\"show-answers-span\">{answer}</span>\n                  </p>\n                  {localScore === score ? (\n                    <p className=\"purple-text\">\n                      Sorry, better luck with the next question\n                    </p>\n                  ) : (\n                    <p className=\"purple-text\">Well done! You're right</p>\n                  )}\n                </div>\n              )}\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {showQuestion ? (\n                <Button\n                  variant=\"primary\"\n                  type=\"button\"\n                  className=\"question-form--submit\"\n                  size=\"sm\"\n                  onClick={() => {\n                    answerCheck(selected);\n                  }}\n                >\n                  Submit Answer\n                </Button>\n              ) : (\n                <Button\n                  variant=\"primary\"\n                  type=\"button\"\n                  className=\"question-form--submit\"\n                  size=\"sm\"\n                  onClick={() => {\n                    sendAnswer(selected, localScore);\n                  }}\n                >\n                  Go to the next question...\n                </Button>\n              )}\n            </Col>\n            <Col className=\"question--form-col\">\n              <p className=\"question-form--score\">Score: {localScore}</p>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </>\n  );\n};\n\nexport default Question;\n","import React, { useContext, useState } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  ProgressBar,\n  Spinner,\n  Button,\n} from 'react-bootstrap';\n\nimport { useParams } from 'react-router-dom';\nimport { Context } from '../context/Store';\nimport Question from './Question';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst QuizContent = () => {\n  const [state] = useContext(Context);\n  const [questionNum, setQuestionNum] = useState(0);\n  const [score, setScore] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  //Set Up\n  let { quizId } = useParams();\n  const quiz = state.quizzes.filter((q) => q.details.id.toString() === quizId);\n\n  //Helper functions\n  const processAnswer = (selected, localScore) => {\n    //Set our returned score\n    setScore(localScore);\n    setQuestionNum(questionNum + 1);\n    setProgress(\n      ((questionNum + 1) / quiz[0].questions.length).toFixed(2) * 100\n    );\n  };\n\n  return (\n    <>\n      <Container fluid>\n        <Row className=\"text-center\">\n          {quiz[0] ? (\n            <Col>\n              <h2 className=\"quiz-title\">{quiz[0].details.name}</h2>\n              <div>\n                <ProgressBar\n                  striped\n                  animated\n                  variant=\"info\"\n                  now={progress}\n                  label={`${progress}% through quiz`}\n                />\n              </div>\n              {quiz[0].questions[questionNum] ? (\n                <>\n                  <Question\n                    question={quiz[0].questions[questionNum]}\n                    num={questionNum}\n                    sendAnswer={(selected, localScore) =>\n                      processAnswer(selected, localScore)\n                    }\n                    key={uuidv4()}\n                    score={score}\n                  />\n                </>\n              ) : (\n                <div className=\"score-board\">\n                  <p className=\"loading-quiz\">That's the end of the quiz</p>\n                  <p className=\"purple-text\">\n                    You scored {score} out of {quiz[0].questions.length}\n                  </p>\n                  {(score / quiz[0].questions.length) * 100 >= 75 ? (\n                    <p className=\"purple-text\">That's pretty good</p>\n                  ) : (\n                    <p className=\"orange-text\">\n                      Time to revise...better luck next time\n                    </p>\n                  )}\n                  <Button variant=\"primary\" size=\"sm\" href={`/play`}>\n                    Play Another Quiz\n                  </Button>\n                </div>\n              )}\n            </Col>\n          ) : (\n            <Col>\n              <p className=\"loading-quiz\">Quiz is loading...</p>\n              <Spinner animation=\"grow\" variant=\"primary\" />\n            </Col>\n          )}\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default QuizContent;\n","import React, { useContext } from 'react';\nimport { Container, Row, Col, Spinner } from 'react-bootstrap';\nimport QuizCard from '../components/QuizCard';\nimport QuizContent from '../components/QuizContent';\nimport { Context } from '../context/Store';\n\nimport { useRouteMatch, Switch, Route } from 'react-router-dom';\n\nconst QuizPickerScreen = () => {\n  const [state] = useContext(Context);\n  let match = useRouteMatch();\n\n  const quizList = state.quizzes;\n\n  return (\n    <Container>\n      <Row>\n        {/* Router for this component */}\n        <Switch>\n          <Route path={`${match.path}/:quizId`}>\n            <QuizContent />\n          </Route>\n          <Route path={match.path}>\n            {quizList ? (\n              quizList.map((m) => (\n                <Col\n                  md={6}\n                  xs={12}\n                  key={m.details.id}\n                  className=\"quiz-picker-col\"\n                >\n                  <QuizCard content={m} key={m.details.id} />\n                </Col>\n              ))\n            ) : (\n              <Col>\n                <p className=\"loading-quiz\">Loading...</p>\n                <Spinner animation=\"grow\" variant=\"primary\" />\n              </Col>\n            )}\n          </Route>\n        </Switch>\n      </Row>\n    </Container>\n  );\n};\n\nexport default QuizPickerScreen;\n","import React from 'react';\nimport { Card, Button, Container, Col, Row } from 'react-bootstrap';\n\nconst WelcomeScreen = () => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Card className=\"text-center\">\n            <Card.Header>Play Quizzes</Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Test out your knowledge and play one of our quizzes\n              </Card.Text>\n              <Button variant=\"primary\" href=\"/play\">\n                Pick A Quiz\n              </Button>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col>\n          <Card className=\"text-center\">\n            <Card.Header>Write a Quiz</Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Are you full of questions? Use our creator to make your own quiz\n              </Card.Text>\n              <Button variant=\"primary\" href=\"/create\">\n                Create a Quiz\n              </Button>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default WelcomeScreen;\n","import React, { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nconst QuizDetails = ({ setDetails }) => {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n  const handleDescChange = (event) => {\n    setDescription(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setDetails(name, description);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"quizForm.quizDetails\">\n          <Form.Label>Name of Quiz</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            placeholder=\"Give your quiz a name\"\n            value={name}\n            onChange={handleNameChange}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"quizForm.quizDetails-2\">\n          <Form.Label>Description of your quiz</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows=\"3\"\n            placeholder=\"Tell users what your quiz is about\"\n            required\n            value={description}\n            onChange={handleDescChange}\n          />\n        </Form.Group>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          className=\"question-form--submit\"\n          size=\"sm\"\n        >\n          Submit Quiz Details\n        </Button>\n\n        <p className=\"orange-text divider-text\">\n          You'll add your questions next...\n        </p>\n      </Form>\n    </>\n  );\n};\n\nexport default QuizDetails;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nconst QuizQuestions = ({\n  handleQuestions,\n  questionCount,\n  questionToEdit,\n  idxToEdit,\n}) => {\n  const [question, setQuestion] = useState('');\n  const [answers, setAnswers] = useState(['', '']);\n  const [correctAnswer, setCorrectAnswer] = useState('');\n\n  useEffect(() => {\n    if (questionToEdit !== null) {\n      const { question, answer, answers } = questionToEdit.question;\n      setQuestion(question);\n      setCorrectAnswer(answer);\n      setAnswers(answers);\n    }\n  }, [questionToEdit]);\n\n  const addAnswer = () => {\n    const newAnswers = [...answers, ''];\n    setAnswers(newAnswers);\n  };\n\n  const handleAnswerChange = (event) => {\n    const updatedAnswers = [...answers];\n    updatedAnswers[event.target.id] = event.target.value;\n    setAnswers(updatedAnswers);\n  };\n\n  const handleQuestionChange = (event) => {\n    setQuestion(event.target.value);\n  };\n\n  const handleSelect = (event) => {\n    setCorrectAnswer(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    //Check the question has a question Mark\n    const sub = question.substr(question.length - 1);\n    if (sub !== '?') {\n      const questionToSubmit = question + '?';\n      setQuestion(questionToSubmit);\n    }\n    //check our correct answer isn't blank\n    var rightAnswer = '';\n    if (correctAnswer === '') {\n      const newAns = answers[0];\n      rightAnswer = newAns;\n    } else {\n      rightAnswer = correctAnswer;\n    }\n\n    handleQuestions(question, answers, rightAnswer, idxToEdit);\n    //Now clear all our questions\n    setQuestion('');\n    setAnswers(['', '']);\n    setCorrectAnswer('');\n  };\n\n  const removeAnswerOption = (idx) => {\n    const newAns = [...answers];\n    newAns.splice(idx, 1);\n    setAnswers(newAns);\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <p className=\"purple-text\">Let's add some questions...</p>\n        <Form.Group controlId=\"questionForm.questionInput\">\n          <Form.Label>\n            {idxToEdit === null\n              ? `Question ${questionCount + 1}`\n              : `Editing Question ${idxToEdit + 1}`}\n          </Form.Label>\n          <Form.Control\n            type=\"text\"\n            required\n            placeholder=\"Your question\"\n            value={question}\n            onChange={handleQuestionChange}\n          />\n        </Form.Group>\n        {answers.map((a, idx) => {\n          return (\n            <Form.Group key={`${idx}`}>\n              <Form.Control\n                type=\"text\"\n                required\n                placeholder={`Answer ${idx + 1}`}\n                id={`${idx}`}\n                data-idx={idx}\n                value={answers[idx]}\n                onChange={handleAnswerChange}\n              />\n              {idx > 1 ? (\n                <p className=\"remove-answer-text\">\n                  <Button\n                    onClick={() => removeAnswerOption(idx)}\n                    className=\"inline-button\"\n                  >\n                    Remove Answer\n                  </Button>\n                </p>\n              ) : null}\n            </Form.Group>\n          );\n        })}\n        <Form.Group>\n          <Button\n            onClick={() => addAnswer()}\n            type=\"button\"\n            size=\"sm\"\n            className=\"add-another-answer\"\n            variant=\"danger\"\n          >\n            Add another answer\n          </Button>\n        </Form.Group>\n        <Form.Group className=\"select-correct-answer\">\n          <Form.Label className=\"purple-text\">\n            Select the Correct Answer\n          </Form.Label>\n          <Form.Control\n            as=\"select\"\n            id=\"answer-select\"\n            onChange={handleSelect}\n            required\n          >\n            {answers.map((a, idx) => {\n              return a === '' ? null : <option id={idx}>{a}</option>;\n            })}\n          </Form.Control>\n        </Form.Group>\n\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          className=\"question-form--submit\"\n          size=\"sm\"\n        >\n          {idxToEdit === null ? 'Submit Question' : 'Update Question'}\n        </Button>\n\n        <p className=\"orange-text divider-text\">\n          You'll add more questions next...\n        </p>\n      </Form>\n    </>\n  );\n};\n\nexport default QuizQuestions;\n","import React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\n\nconst Success = ({ quizName, quizId }) => {\n  return (\n    <Container>\n      <Row>\n        <Col className=\"text-center\">\n          <h2 class=\"quiz-title\">Success!</h2>\n        </Col>\n      </Row>\n      <Row>\n        <p class=\"purple-text\">Your {quizName} has been added</p>\n      </Row>\n      <Row>\n        <Button variant=\"primary\" href={`/play/${quizId}`}>\n          Go and Play Your Quiz!\n        </Button>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Success;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n} from 'react-bootstrap';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport QuizDetails from '../components/QuizForm/QuizDetails';\nimport QuizQuestions from '../components/QuizForm/QuizQuestions';\nimport Success from '../components/QuizForm/Success';\n\nimport firebase from '../keys/firebase';\n\nconst CreateQuizScreen = () => {\n  const [quizDetails, setQuizDetails] = useState([]);\n  const [questionList, setQuestionList] = useState([]);\n  const [successState, setSuccessState] = useState(false);\n  const [questionToEdit, setQuestionToEdit] = useState(null);\n  const [editingIdx, setEditingIdx] = useState(null);\n\n  //Set up firebase\n  var db = firebase.firestore();\n\n  useEffect(() => {\n    //Check if the user is already putting a quiz together\n    var localQuiz = JSON.parse(localStorage.getItem('quizDetails'));\n    if (localQuiz) {\n      setQuizDetails(localQuiz);\n    }\n    var localQuestions = JSON.parse(localStorage.getItem('quizQuestions'));\n    if (localQuestions) {\n      setQuestionList(localQuestions);\n    }\n  }, []);\n\n  const handleQuizDetails = (name, description) => {\n    let quizDetailsObject = {\n      description,\n      name,\n      id: uuidv4(),\n      questions: 0,\n    };\n    setQuizDetails(quizDetailsObject);\n\n    //Save it to local storage\n    localStorage.setItem('quizDetails', JSON.stringify(quizDetailsObject));\n  };\n\n  const handleQuestions = (question, answers, correctAnswer, idx) => {\n    //Put together the new question\n    const newQuestion = {\n      question,\n      answers,\n      answer: correctAnswer,\n    };\n    //Create a copy of our existing questions\n    const existingQuestions = [...questionList];\n    //Check if we're updating a question (if we are there will be an ID)\n    if (idx === null) {\n      //not updating\n      existingQuestions.push(newQuestion);\n    } else {\n      //Updating\n      existingQuestions[idx] = newQuestion;\n    }\n\n    //We have a new question\n\n    //Finally, update the question list\n    setQuestionList(existingQuestions);\n\n    //Create local storage version so user can reload browser window\n    localStorage.setItem('quizQuestions', JSON.stringify(existingQuestions));\n\n    //Reset our edit state\n    setEditingIdx(null);\n  };\n\n  const submitQuiz = () => {\n    //Add correct number of questions to quiz details\n    const finalDetails = quizDetails;\n    quizDetails.questions = questionList.length;\n    //Prepare whole thing as an object\n    const quizObject = { details: finalDetails, questions: questionList };\n    //call firebase\n    db.collection('quizzes')\n      .doc(uuidv4())\n      .set(quizObject)\n      .then(() => setSuccessState(true))\n      .catch((e) => console.log(e));\n\n    //Finally clear local storage of our quiz option\n    localStorage.removeItem('quizDetails');\n    localStorage.removeItem('quizQuestions');\n  };\n\n  const deleteQuestion = (idx) => {\n    const newList = [...questionList];\n    newList.splice(idx, 1);\n    setQuestionList(newList);\n    //Update local storage\n    localStorage.setItem('quizQuestions', JSON.stringify(newList));\n  };\n\n  const editQuestion = (idx) => {\n    const q = { question: questionList[idx] };\n    setEditingIdx(idx);\n    setQuestionToEdit(q);\n  };\n\n  const resetScreen = () => {\n    //Function for when a user doesn't want to continue\n    localStorage.removeItem('quizQuestions');\n    localStorage.removeItem('quizDetails');\n    setQuizDetails([]);\n    setQuestionList([]);\n    setQuestionToEdit(null);\n    setEditingIdx(null);\n  };\n\n  return (\n    <>\n      {successState === true ? (\n        <Success quizId={quizDetails.id} quizName={quizDetails.name} />\n      ) : (\n        <Container>\n          <Row>\n            <Col className=\"text-center\">\n              <h2 className=\"quiz-title\">Create Your Own Quiz</h2>\n              <p>To create your own quiz simple use the form below</p>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              {quizDetails.name ? (\n                <QuizQuestions\n                  questionCount={questionList.length}\n                  handleQuestions={(question, answers, correctAnswer, idx) =>\n                    handleQuestions(question, answers, correctAnswer, idx)\n                  }\n                  questionToEdit={questionToEdit}\n                  idxToEdit={editingIdx}\n                />\n              ) : (\n                <QuizDetails\n                  setDetails={(name, description) =>\n                    handleQuizDetails(name, description)\n                  }\n                />\n              )}\n            </Col>\n            <Col xs={12} md={4}>\n              <p className=\"purple-text\">\n                {quizDetails.name\n                  ? `${quizDetails.name} Questions`\n                  : 'Questions in your quiz...'}\n              </p>\n              <ol>\n                {questionList.map((q, idx) => {\n                  return (\n                    <li id={idx} key={idx}>\n                      {q.question}\n                      <p className=\"remove-answer-text\">\n                        <Button\n                          className=\"inline-button\"\n                          onClick={() => editQuestion(idx)}\n                        >\n                          Edit\n                        </Button>\n                        <Button\n                          className=\"inline-button\"\n                          onClick={() => deleteQuestion(idx)}\n                        >\n                          Delete\n                        </Button>\n                      </p>\n                    </li>\n                  );\n                })}\n              </ol>\n              <Button onClick={() => submitQuiz()} type=\"button\" size=\"sm\">\n                Finished adding questions?\n              </Button>\n              <div className=\"reset-button-area\">\n                <OverlayTrigger\n                  key=\"left\"\n                  placement=\"left\"\n                  overlay={\n                    <Tooltip id=\"warning-tooltip\">\n                      Warning: This will delete your quiz\n                    </Tooltip>\n                  }\n                >\n                  <Button\n                    onClick={() => resetScreen()}\n                    type=\"button\"\n                    size=\"sm\"\n                    className=\"inline-button\"\n                  >\n                    Reset Quiz\n                  </Button>\n                </OverlayTrigger>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default CreateQuizScreen;\n","import React from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nconst Footer = () => {\n  return (\n    <>\n      <Jumbotron fluid className=\"footer\">\n        <p>2020 Build-a-Quiz</p>\n      </Jumbotron>\n    </>\n  );\n};\n\nexport default Footer;\n","import React, { useContext, useEffect } from 'react';\n\n//import store\nimport { Context } from '../context/Store';\n//Routing imports\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n//Firebase\nimport firebase from '../keys/firebase.js';\n\n//Components\nimport NavigationBar from '../components/NavigationBar';\nimport Jumbo from '../components/Jumbo';\nimport QuizPickerScreen from './QuizPickerScreen';\nimport WelcomeScreen from './WelcomeScreen';\nimport CreateQuizScreen from './CreateQuizScreen';\nimport Footer from './Footer';\n\nconst MainScreen = () => {\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    //load firebase when we start and update the state\n    var db = firebase.firestore();\n    db.collection('quizzes').onSnapshot((querySnapshot) => {\n      var quizzesToAdd = [];\n      querySnapshot.forEach((doc) => {\n        quizzesToAdd.push(doc.data());\n      });\n      dispatch({ type: 'SET_QUIZZES', payload: quizzesToAdd });\n    });\n  }, []);\n\n  return (\n    <>\n      <NavigationBar />\n      <Jumbo />\n      <Switch>\n        <Route path=\"/play\" component={QuizPickerScreen} />\n        <Route path=\"/create\" component={CreateQuizScreen} />\n        <Route exact path=\"/\" component={WelcomeScreen} />\n      </Switch>\n      <Footer />\n    </>\n  );\n};\n\nexport default MainScreen;\n","import React from 'react';\nimport './App.scss';\n\n//New store\nimport Store from './context/Store';\n\nimport MainScreen from './screens/MainScreen';\n\nconst App = () => {\n  return (\n    <Store>\n      <MainScreen />\n    </Store>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL + '/build-a-quiz'}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}